§template(
  <link rel="stylesheet" href="./assets/euler_diagrams.css">
  <script defer src="./assets/katex.min.js"></script>

  <script defer src="./assets/euler_diagrams.js" type="module"></script>
)(
  §hsection["chapter_sets"](Naïve Set Theory)(
    §p(
      In the §cref(chapter_deductive_reasoning)(previous chapter) we examined how to formulate, prove, and disprove statements. The example statements we looked at talked about numbers and squirrel, but the principles we examined apply regardless of which objects the statements talk about. In this chapter, we examine a class of objects that is so powerful that we can express everything from numbers to computers to proofs themselves in it. This class of objects will provide the foundation for everything we will study throughout this book.
    )§p(
      Such a universal domain will allow us to apply very general concepts to arbitrarily specific situations. And yet you will find that the objects our statements will talk about are in themselves very simple. Striking that balance between simplicity and universality of foundational objects was arguably one of the key achievements of the 20th century: the development of §em(set theory).
    )

    §hsection["section_sets"](Sets)(
      §p(
        When attempting to define the foundations of mathematics, you run into a chicken-egg problem: Any definition needs to make use of mathematical concepts, so in particular the definition of the foundational objects also requires prior definitions. But then it clearly is not foundational.
      )§p(
        While there are sophisticated ways of avoiding this problem, they require a good understanding of mathematics to begin with. So we instead follow the traditional approach in teaching: Our very first definition will be slightly informal, and we will simply pretend that it was sufficiently precise. Hence the §verbatim(naïve) in the chapter title §verbatim(naïve set theory).
      )§p(
        In particular, we will talk about mathematical §verbatim(objects), without specifically stating what those are. For our purposes, we require that an object is §r(equal) to itself but not to anything else. The number §$(17)(,) for example, is a mathematical object.
      )§p(
        Furthermore, an object must be §verbatim(well-defined), that is, it must be clear, for the purposes of determining §r(equal)(equality), which object you are talking about. For example, §verbatim(the most important composer of the 18th century) is not well-defined; whether the most important composer of the 18th century is §r(equal) to §link(Johann Sebastian Bach)(https://en.wikipedia.org/wiki/Johann_Sebastian_Bach) is a matter of personal opinion, not mathematical reasoning.
      )§p(
        We will use squirrel-related iconography for our mathematical objects: §$(§$symbol0§ , §$symbol1§ , §$symbol2§ , §$symbol3)(,) and §$(§$symbol4)(.) But now it is high time to look at the one definition on which everything else in this book will build upon:
      )

      §definition["set"](Set)(
        §set_math_id["set", "set"]
        §p(
          A §define(set) is a collection of objects, characterized solely by which objects belong to it, and which objects do not.
        )§p(
          We denote a §r(set) by listing its objects within curly braces, separated by commas, for example: §$(§$set(§$symbol0)(§$symbol1)(§$symbol2))(.)
        )§p(
          The §define(empty set) §$(§$set()) — the collection that contains no objects at all — is also written as §$(§$set)(.)
        )
      )

      §p(
        Because a §r(set) is characterized by the objects that belong to it, §$(§$set(§$symbol0)(§$symbol1)) and §$(§$set(§$symbol1)(§$symbol0)) are two different ways of denoting the same §r(set). Informally speaking, §rs(set) ignores the order of their objects. Furthermore, §$(§$set(§$symbol0)(§$symbol1)(§$symbol0)) and §$(§$set(§$symbol0)(§$symbol1)) also denote the same §r(set), you could say that §rs(set) ignore duplicates. All three expressions are simply different ways of denoting the unique mathematical object characterized by the fact that §$(§$symbol0) and §$(§$symbol1) belong to it, but nothing else does.
      )§p(
        After the build-up about the foundational concept that is able to express anything you could possibly dream up, the notion of §rs(set) might be a bit of a letdown at first glance. We will get to the reasons for why §rs(set) are a very powerful concept soon enough, but first, we define and inspect some elementary terminology and notions.
      )

      §definition["set_membership"](Set Membership)(
        §set_math_id["in", "set_membership"]
        §set_math_id["notin", "set_membership"]
        §p(
          To express that an object §$(x) occurs in a §r(set) §$(X)(,) we write §$(x §$in X)(,) and we say that §verbatim(§$(x) is an §define(element) of §$(X)), §verbatim(§$(x) is a §define(member) of §$(X)), or more simply that §verbatim(§$(x) §define(in) §$(X)).
        )§p(
          If not §$(x §$in X)(,) we write §$(x §$notin X)(.)
        )
      )

      §example["example_set_membership"](
        §$(§$symbol0 §$in §$set(§$symbol0)(§$symbol1))(,) §$(§$symbol1 §$in §$set(§$symbol0)(§$symbol1))(,) and §$(§$symbol2 §$notin §$set(§$symbol0)(§$symbol1))(.)
      )

      §p(
        We can visualize §rs(member)(set membership) by drawing §rs(set) as blobs that enclose their §rs(element). §cref(example_euler_diagram) demonstrates such an §definex["euler_diagram"](Euler diagram)(
          §p(
            An §rdef(Euler diagram) visualizes §rs(member)(set membership) by drawing §rs(set) as blobs that enclose their §rs(element).
          )
          §input["euler_diagrams/vanilla_no_controls.html"]
        ). Note how the idea of a §r(set) containing §rs(element) multiple times or in a particular order cannot even be expressed in these depictions, making §rs(Euler diagram) a more faithful representations of §rs(set) than our written notation.
      )

      §div(slightlywide)(
        §example["example_euler_diagram"](Euler Diagram)(
          §captioned(
            §input["euler_diagrams/vanilla.html"]
          )(
            §p(An interactive §r(Euler diagram) showing two §rs(set). Toggle the buttons to change the depicted §rs(set).)
          )
        )
      )

      §hsection["subsection_set_equality"](Set Equality)(
        §p(
          Based on the notion of §r(member)(set membership), we can define precisely when two §rs(set) are considered equal.
        )

        §definition["set_eq"](Set Equality)(
          §set_math_id["seq", "set_eq"]
          §set_math_id["sneq", "set_eq"]
          §p(
            Let §$(A) and §$(B) be §rs(set).
          )
          §p(
            We say §$(A) and §$(B) are §define["", "sequal"](equal)(equal), written as §$(A §$seq B)(,) if for all §$(x) we have §$(x §$in A) if and only if §$(x §$in B)(.)
          )§p(
             If not §$(A §$seq B)(,) we write §$(A §$sneq B)(.)
          )
        )

        §p(
          Take a moment to consider some equivalent formulations to the §verbatim(if and only if) in §cref(set_eq):
        )
        §ul(
          §li(§$(A §$seq B) if every §$(x §$in A) is §r(in) §$(B) and every §$(x §$in B) is §r(in) §$(A)(.))
          §li(§$(A §$seq B) if every §$(x §$in A) is §r(in) §$(B) and every §$(x §$notin A) is not §r(in) §$(B)(.))
          §li(§$(A §$seq B) if every §$(x) is either §r(in) both §$(A) and §$(B) or §r(in) neither.)
        )
        §p(
          All of these ways of looking at §r(sequal)(set equality) can come in handy when trying to prove that two complex descriptions of §rs(set) actually describe the same one. §cref(example_seq) visualizes the third interpretation.
        )

        §div(slightlywide)(
          §example["example_seq"](Set Equality)(
            §captioned(
              §input["euler_diagrams/equality.html"]
            )(
              §p(
                Two §rs(set), the §rs(element) that occur in exactly one of them are §span{"class": "s3"}(highlighted). You can change the §rs(set), note how the §rs(set) are §r(sequal) exactly if no such §span{"class": "s3"}(highlighted) §rs(element) remain.
              )
            )
          )
        )

        §p(
          Equipped with a precise definition of §r(sequal)(set equality), we can now prove some fundamental properties of §r(sequal) §rs(set).
        )

        §theorem["seq_reflexivity"](Reflexivity of §$(§$seq[true]))(
          §p(
            Let §$(A) be a §r(set), then §$(A §$seq A).
          )
        )
        §proof["seq_reflexivity"](
          §proof_part(
            §verbatim(§$(a §$in A §$implies a §$in A)):
          )(
            §p(
              Let §$(a §$in A)(,) then §$(a §$in A) by assumption.
            )
          )
          §proof_part(
            §verbatim(§$(a §$notin A §$implies a §$notin A)):
          )(
            §p(
              Let §$(a §$notin A)(,) then §$(a §$notin A) by assumption.
            )
          )
        )

        §theorem["seq_symmetry"](Symmetry of §$(§$seq[true]))(
          §p(
            Let §$(A, B) be §rs(set). If §$(A §$seq B)(,) then §$(B §$seq A)(.)
          )
        )
        §proof["seq_symmetry"](
          §p(
            Assume that §$(A §$seq B)(,) that is, assume that §$(x §$in A) implies §$(x §$in B)(,) and that §$(x §$in B) implies §$(x §$in A)(.) Then we also have that §$(x §$in B) implies §$(x §$in A) and §$(x §$in A) implies §$(x §$in B)(,) that is, §$(B §$seq A)(.)
          )
        )

        §theorem["seq_transitivity"](Transitivity of §$(§$seq[true]))(
          §p(
            Let §$(A, B, C) be §rs(set). If §$(A §$seq B) and §$(B §$seq C)(,) then §$(A §$seq C)(.)
          )
        )
        §proof["seq_transitivity"](
          §p(
            Assume that §$(A §$seq B) and §$(B §$seq C)(.)
          )
          §proof_part(
            §verbatim(§$(a §$in A §$implies a §$in C)):
          )(
            §p(
              Let §$(x §$in A)(,) then
            )§fleqn(
              §$$align*(
                && x &§$in A
              )(
                §$implies {} && x &§$in B §$tag($A §$seq B$)
              )(
                §$implies {} && x &§$in C. §$tag($B §$seq C$)
              )
            )
          )
          §proof_part(
            §verbatim(§$(a §$notin A §$implies a §$notin C)):
          )(
            §p(
              Let §$(x §$notin A)(,) then
            )§fleqn(
              §$$align*(
                && x &§$notin A
              )(
                §$implies {} && x &§$notin B §$tag($A §$seq B$)
              )(
                §$implies {} && x &§$notin C. §$tag($B §$seq C$)
              )
            )
          )
        )

        §p(
          These properties might feel so self-evidently true (just picture the §rs(Euler diagram)) that it can initially be hard to know where to even begin proving them. So while these proofs might not be the most flashy ones, it is quite remarkable that we can rigorously reason about such fundamental properties rather than having to blindly accept them as true.
        )

        §exercise["transitivity_sneq"](
          §p(
            Let §$(A, B, C) be §rs(set). Prove or disprove: if §$(A §$sneq B) and §$(B §$sneq C)(,) then §$(A §$sneq C)(.)
          )
          §solution["transitivity_sneq"](
            §p(
              We disprove the statement by giving a counterexample. Define §$(A §$defeq §$set(§$symbol0), B §$defeq §$set(§$symbol1))(,) and §$(C §$defeq §$set(§$symbol0))(.) Then §$(A §$sneq B) (because §$(§$symbol0 §$in A) but §$(§$symbol0 §$notin B)), §$(B §$sneq C) (because §$(§$symbol1 §$in B) but §$(§$symbol1 §$notin C)), but §$(A §$seq C)(.)
            )
          )
        )

      )

      §hsection["subsection_subsets"](Subsets)(
        §p(
          We can think of §r(sequal)(set equality) as a very strict way of looking for similarity between two §rs(set). But there are more general ways in which §rs(set) can be related. It might be the case, for example, that one §r(set) contains all §rs(element) of another §r(set) and then some. This relation is common enough that we give it a name:
        )

        §definition["subset"](Subset, Superset)(
          §set_math_id["subseteq", "subset"]
          §set_math_id["subset", "subset"]
          §set_math_id["supseteq", "subset"]
          §set_math_id["supset", "subset"]
          §set_math_id["nsubseteq", "subset"]
          §set_math_id["nsubset", "subset"]
          §set_math_id["nsupseteq", "subset"]
          §set_math_id["nsupset", "subset"]
          §p(
            Let §$(A) and §$(B) be §rs(set).
          )
          §p(
            We say §$(A) is a §define(subset) of §$(B)(,) written as §$(A §$subseteq B)(,) if for all §$(x §$in A) we have §$(x §$in B)(.) If furthermore §$(A §$sneq B)(,) we say that §$(A) is a §define(strict subset)(strict subset) of §$(B)(,) written as §$(A §$subset B)(.)
          )§p(
            Conversely, we say that §$(B) is a §define(superset) of §$(A)(,) written as §$(B §$supseteq A)(,) if §$(A §$subseteq B)(,) and we say that §$(B) is a §define(strict supset)(strict superset) of §$(A)(,) written as §$(B §$supset A)(,) if §$(A §$subset B)(.)
          )§p(
            We further write §$(A §$nsubseteq B) if not §$(A §$subseteq B)(,) §$(A §$nsubset B) if not §$(A §$subset B)(,) §$(A §$nsupseteq B) if not §$(A §$supseteq B)(,) and §$(A §$nsupset B) if not §$(A §$supset B)(.)
          )
        )

        §div(slightlywide)(
          §example["example_subset"](Subsets and Supersets)(
            §captioned(
              §input["euler_diagrams/subset.html"]
            )(
              §p(
                Two §rs(set) and the §r(subset) and §r(superset) relations between them.
              )
            )
          )
        )

        §p(
          If you compare the definitions of §r(sequal)(set equality) and §rs(subset), you can see that the definition of §rs(subset) is essentially one direction of the §r(bi-implication) in the definition of §r(sequal)(set equality). In other words, two §rs(set) are §r(sequal) if they are both §rs(subset) and §rs(superset) of each other. Formally:
        )

        §observation["sequality_and_subsets"](
          §$(A §$seq B) if and only if §$(A §$subseteq B) and §$(A §$supseteq B)(.)
        )
        §proof["sequality_and_subsets"](
          §proof_as_exercise["sequality_and_subsets"](
            §proof_part(
              §verbatim(§$(A §$seq B §$implies A §$subseteq B) and §$(A §$supseteq B)):
            )(
              §p(
                Assume §$(A §$seq B)(.) We now show that §$(A §$subseteq B) and §$(A §$supseteq B)(.)
              )§p(
                Let §$(a §$in A)(,) then §$(a §$in B)(,) because §$(A §$seq B)(.) Thus, §$(A §$subseteq B)(.)
              )§p(
                Analogously, let §$(b §$in B)(,) then §$(b §$in A)(,) because §$(A §$seq B)(.) Thus, §$(A §$supseteq B)(.)
              )
            )
            §proof_part(
              §verbatim(§$(A §$subseteq B) and §$(A §$supseteq B §$implies A §$seq B)):
            )(
              §p(
                Assume that §$(A §$subseteq B) and §$(A §$supseteq B)(.) We now show that §$(A §$seq B)(.)
              )
              §proof_part(
                §verbatim(§$(a §$in A §$implies a §$in B)):
              )(
                Let §$(a §$in A)(,) then §$(a §$in B)(,) because §$(A §$subseteq B)(.)
              )
              §proof_part(
                §verbatim(§$(b §$in B §$implies b §$in A)):
              )(
                Let §$(b §$in B)(,) then §$(b §$in A)(,) because §$(A §$supseteq B)(.)
              )
            )
          )
        )

        §p(
          This alternate characterization offers yet another way of proving §r(sequal)(set equality).
        )

        §p(
          If you played around a bit with §cref(example_subset), you may have noticed that the §r(empty set) is a §r(subset) of every set. To understand why, we need to take a close look at how §rs(subset) are defined. The §r(subset)(definition) talks about §verbatim(all §$(x §$in A)), so what happens if §$(A §$seq §$set)(?) There exists no §$(x) such that §$(x §$in §$set)(,) so what does that mean for the §r(subset)(definition)?
        )§p(
          On an intuitive level, you can say that in order to show that some §r(set) is a §r(subset) of another, you need to show that a certain property holds for each of its §rs(member). As the §r(empty set) has no §rs(member), you do not need to show anything.
        )§p(
          More formally, the phrase §verbatim(for all §$(x §$in A) holds §i(bla)) is a shorthand for §verbatim(for all objects §$(x) holds that §$(x §$in A) implies §i(bla)). With that knowledge, we can formally prove that the §r(empty set) is a §r(subset) of every set:
        )

        §theorem["empty_set_subset_everything"](
          §p(Let §$(A) be a §r(set), then §$(§$set §$subseteq A)(.))
        )
        §proof["empty_set_subset_everything"](
          §p(
            Let §$(x) be an object. We need to show that §$(x §$in §$set) implies §$(x §$in A)(,) so assume that §$(x §$in §$set)(.)
          )§p(
            Because the §r(empty set) has no §rs(member), we know that §$(x §$notin §$set)(.) As we cannot have §$(x §$in §$set) and §$(x §$notin §$set) simultaneously, §$(x §$in A) holds by the §r(principle of explosion).
          )
        )

        §p(
          Whenever a statement of §r(universal quantification) holds because it is constrained to elements from the §r(empty set), we say that the statement holds §define(vacuously).
        )

        §exercise["vacuous_nontruth"](
          §p(
            Based on your knowledge about §r(negation)(negating) §rs(universal quantification), give a full picture of how statements like §verbatim(there exists §$(x §$in §$set) such that §i(bla)) work out.
          )
          §solution["vacuous_nontruth"](
            §p(
              Such a statement is always false; intuitively it is impossible to find a §r(witness) that is §r(in) the §r(empty set).
            )
            §p(
              §verbatim(There exists §$(x §$in §$set) such that §i(bla)) is §r(bi-implication)(equivalent) to its §r(double negation) §verbatim(it does not hold that there exists no §$(x §$in §$set) such that §i(bla)). This in turn is §r(bi-implication)(equivalent) to §verbatim(it does not hold that for all §$(x §$in §$set) §i(not bla)), which is the §r(negation) of a §r(vacuously) true statement, and thus false.
            )
          )
        )

        §p(
          The concept of §rs(subset) is ubiquitous in mathematics, so use the following exercises and theorems to familiarize yourself with it. They also present a good opportunity to practice your §r(deductive reasoning) skills.
        )

        §exercise["exercise_partial_subsets"](
          §p(
            Give §rs(set) §$(A)(,) §$(B)(,) and §$(C)(,) such that §$(A §$subseteq C) and §$(B §$subseteq C)(,) but §$(A §$nsubseteq B) and §$(B §$nsubseteq A)(.)
          )
          §solution["exercise_partial_subsets"](
            §p(
              Define §$(A §$defeq §$set(§$symbol0), B §$defeq §$set(§$symbol1))(,) and §$(C §$defeq §$set(§$symbol0)(§$symbol1))(.) Then §$(A §$subseteq C) and §$(B §$subseteq C)(,) but §$(A §$nsubseteq B) (because §$(§$symbol0 §$in A) but §$(§$symbol0 §$in B)) and §$(B §$nsubseteq A) (because §$(§$symbol1 §$in B) but §$(§$symbol1 §$in A)).
            )
          )
        )

        §theorem["subseteq_reflexivity"](Reflexivity of §$(§$subseteq[true]))(
          §p(
            Let §$(A) be a §r(set), then §$(A §$subseteq A)(.)
          )
        )
        §proof["subseteq_reflexivity"](
          §proof_as_exercise["subseteq_reflexivity"](
            §p(
              Let §$(A) be a §r(set), and let §$(a §$in A). Then §$(a §$in A), and thus §$(A §$subseteq A)(.)
            )
          )
        )

        §theorem["subseteq_transitivity"](Transitivity of §$(§$subseteq[true]))(
          §p(
            Let §$(A, B, C) be §rs(set). If §$(A §$subseteq B) and §$(B §$subseteq C)(,) then §$(A §$subseteq C)(.)
          )
        )
        §proof["subseteq_transitivity"](
          §proof_as_exercise["subseteq_transitivity"](
            §p(
              Let §$(A, B, C) be §rs(set). Assume that §$(A §$subseteq B) and §$(B §$subseteq C)(.)
            )§p(
              Let §$(a §$in A)(,) then
            )§fleqn(
              §$$align*(
                && a &§$in A
              )(
                §$implies {} && a &§$in B §$tag($A §$subseteq B$)
              )(
                §$implies {} && a &§$in C, §$tag($B §$subseteq C$)
              )
            )§p(
              and thus §$(A §$subseteq C)(.)
            )
          )
        )

        §theorem["subset_transitivity"](Transitivity of §$(§$subset[true]))(
          §p(
            Let §$(A, B, C) be §rs(set). If §$(A §$subset B) and §$(B §$subset C)(,) then §$(A §$subset C)(.)
          )
        )
        §proof["subset_transitivity"](
          §proof_as_exercise["subset_transitivity"](
            §p(
              Let §$(A, B, C) be §rs(set). Assume that §$(A §$subset B) and §$(B §$subset C)(.)
            )§p(
              As every §r(strict subset) of a §r(set) is also a (not necessarily strict) §r(subset), §cref(subseteq_transitivity) gives us that §$(A §$subseteq C)(.) It remains to show that §$(A §$sneq C)(.)
            )§p(
              Since §$(A §$sneq B) but every §r(member) of §$(A) is a §r(member) of §$(B) (both because §$(A §$subset B)), there exists some §$(x §$in B) with §$(x §$notin A)(.) Because §$(x §$in B) and §$(B §$subset C)(,) we know that §$(x §$in C). And since §$(x §$notin A)(,) we get that §$(A §$sneq C)(.)
            )
          )
        )

        §exercise["subset_antisymmetry"](
          §p(
            Let §$(A, B) be §rs(set). Prove or disprove: if §$(A §$subset B) and §$(B §$subset A)(,) then §$(A §$seq B)(.)
          )
          §solution["subset_antisymmetry"](
            §p(
              The statement holds. Its §r(premise) can never be fulfilled. We formally prove the statement by assuming the §r(premise) to hold, deriving a contradiction, and applying the §r(principle of explosion) to show the §r(conclusion).
            )§p(
              Assume that §$(A §$subset B) and §$(B §$subset A)(.) Then §$(a §$in A) implies §$(a §$in B) (because §$(A §$subset B)), and furthermore §$(b §$in B) implies §$(b §$in A) (because §$(B §$subset A)), that is, §$(A §$seq B)(.)
            )§p(
              By assumption we also have §$(A §$sneq B) as well however, a contradiction. By the §r(principle of explosion), we can follow that §$(A §$seq B)(,) and have thus proven the statement.
            )§p(
              We could have also ended the proof at the end of its second paragraph, as we have already proven the §r(conclusion) at that point. The third paragraph merely demonstrates how we can show anything from an impossible §r(premise).
            )
          )
        )

        §exercise["subseteq_cyclic"](
          §p(
            Prove or disprove: there exist §rs(set) §$(A, B, C) such that §$(A §$subseteq B)(,) §$(B §$subseteq C)(,) and §$(C §$subseteq A)(.)
          )
          §solution["subseteq_cyclic"](
            §p(
              The statement holds. Define §$(A §$defeq §$set)(,) §$(B §$defeq §$set)(,) and §$(C §$defeq §$set)(.) Then §$(A §$subseteq B)(,) §$(B §$subseteq C)(,) and §$(C §$subseteq A) by §cref(subseteq_reflexivity).
            )§p(
              Bonus exercise: show that for all §rs(set) §$(A, B, C) we have that §$(A §$subseteq B)(,) §$(B §$subseteq C) and §$(C §$subseteq A) if and only if §$(A §$seq B) and §$(B §$seq C)(.)
            )
          )
        )

        §exercise["subset_cyclic"](
          §p(
            Prove or disprove: there exist §rs(set) §$(A, B, C) such that §$(A §$subset B)(,) §$(B §$subset C)(,) and §$(C §$subset A)(.)
          )
          §solution["subset_cyclic"](
            §p(
              The statement does not hold, so we prove its §r(negation). Let §$(A, B, C) be §rs(set), and suppose toward a contradiction that §$(A §$subset B)(,) §$(B §$subset C)(,) and §$(C §$subset A)(.)
            )§p(
              Because §$(A §$subset B)(,) there exists §$(x §$in B) such that §$(x §$notin A)(.) Then §$(x §$in C)(,) because §$(x §$in B) and §$(B §$subset C)(.) But then also §$(x §$in A)(,) because §$(x §$in C) and §$(C §$subset A)(,) a contradiction.
            )
          )
        )





        - exercise: no cyclic subset(eq)s?


- set comprehensions (first time that properties of objects matter, what about mismatches (natural numbers that are medalists in the 1986 olympic Games?))
- exercise: every powerset contains at least two members?

      )



    )

    §chapternav

  )
)
